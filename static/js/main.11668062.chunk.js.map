{"version":3,"sources":["store/index.ts","api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["LOAD_TODOS","SELECT_USER_ID","SET_TODOS_LOAD_ERROR","SET_USER_LOAD_ERROR","LOAD_USER","loadTodosAC","todos","type","selectUserIdAC","userId","todosLoadErrorAC","newError","userLoadErrorAC","loadUserAC","user","loadTodosSelector","state","selectUserIdSelector","todosLoadErrorSelector","todosLoadError","userLoadErrorSelector","userLoadError","loadUserSelector","initialState","store","createStore","action","composeWithDevTools","BASE_URL","getTodos","a","fetch","response","json","getUser","Status","CurrentUser","dispatch","useDispatch","useSelector","errorMessage","useEffect","userFromServer","className","id","name","email","phone","onClick","TodoList","useState","query","setQuery","todosStatus","setTodosStatus","selectedUserId","visibleTodos","filteredByTitle","filter","todo","title","toLowerCase","includes","Completed","completed","Active","preparingTodos","value","onChange","e","target","All","map","classNames","checked","readOnly","App","todosFromServer","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.11668062.chunk.js","sourcesContent":["import { createStore, AnyAction } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n// Action types\nconst LOAD_TODOS = 'LOAD_TODOS';\nconst SELECT_USER_ID = 'SELECT_USER_ID';\nconst SET_TODOS_LOAD_ERROR = 'SET_TODOS_LOAD_ERROR';\nconst SET_USER_LOAD_ERROR = 'SET_USER_LOAD_ERROR';\nconst LOAD_USER = 'LOAD_USER';\n\n// Action creators - a function returning an action object\nexport const loadTodosAC = (todos: Todo[]) => (\n  { type: LOAD_TODOS, todos }\n);\n\nexport const selectUserIdAC = (userId: number) => (\n  { type: SELECT_USER_ID, userId }\n);\n\nexport const todosLoadErrorAC = (newError: string) => (\n  { type: SET_TODOS_LOAD_ERROR, newError }\n);\n\nexport const userLoadErrorAC = (newError: string) => (\n  { type: SET_USER_LOAD_ERROR, newError }\n);\n\nexport const loadUserAC = (user: User | null) => (\n  { type: LOAD_USER, user }\n);\n\n// Selectors - a function receiving Redux state and returning some data from it\nexport const loadTodosSelector = (state: RootState) => state.todos;\nexport const selectUserIdSelector = (state: RootState) => state.userId;\n// eslint-disable-next-line max-len\nexport const todosLoadErrorSelector = (state: RootState) => state.todosLoadError;\nexport const userLoadErrorSelector = (state: RootState) => state.userLoadError;\nexport const loadUserSelector = (state: RootState) => state.user;\n\n// Initial state\nexport type RootState = {\n  todos: Todo[],\n  userId: number,\n  todosLoadError: string,\n  userLoadError: string,\n  user: User | null,\n};\n\nconst initialState: RootState = {\n  todos: [],\n  userId: 0,\n  todosLoadError: '',\n  userLoadError: '',\n  user: null,\n};\n\n// rootReducer - this function is called after dispatching an action\nconst rootReducer = (state = initialState, action: AnyAction) => {\n  switch (action.type) {\n    case LOAD_TODOS:\n      return {\n        ...state,\n        todos: action.todos,\n      };\n\n    case SELECT_USER_ID:\n      return {\n        ...state,\n        userId: action.userId,\n      };\n\n    case SET_TODOS_LOAD_ERROR:\n      return {\n        ...state,\n        todosLoadError: action.newError,\n      };\n\n    case SET_USER_LOAD_ERROR:\n      return {\n        ...state,\n        userLoadError: action.newError,\n      };\n\n    case LOAD_USER:\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    default:\n      return state;\n  }\n};\n\nconst store = createStore(\n  rootReducer,\n  composeWithDevTools(),\n);\n\nexport default store;\n","const BASE_URL = 'https://mate.academy/students-api';\n\nexport async function getTodos(): Promise<Todo[]> {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  return response.json();\n}\n\nexport async function getUser(userId: number): Promise<User> {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  return response.json();\n}\n","import React, { ChangeEvent, useState } from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectUserIdAC, selectUserIdSelector } from '../../store';\n\ntype Props = {\n  todos: Todo[],\n};\n\nenum Status {\n  All = 'all',\n  Completed = 'completed',\n  Active = 'active',\n}\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n}) => {\n  const [query, setQuery] = useState('');\n  const [todosStatus, setTodosStatus] = useState('');\n\n  const dispatch = useDispatch();\n  const selectedUserId = useSelector(selectUserIdSelector);\n\n  const onFilterByTitleHandleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n  };\n\n  const onTodoSelectHandleChange = (e: ChangeEvent<HTMLSelectElement>) => {\n    setTodosStatus(e.target.value);\n  };\n\n  const onSelectUserIdHandle = (userId: number) => {\n    dispatch(selectUserIdAC(userId));\n  };\n\n  const filterByTitle = () => {\n    return todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n  };\n\n  const preparingTodos = () => {\n    const filteredByTitle = filterByTitle();\n\n    switch (todosStatus) {\n      case Status.Completed: {\n        return filteredByTitle.filter(todo => todo.completed);\n      }\n\n      case Status.Active: {\n        return filteredByTitle.filter(todo => !todo.completed);\n      }\n\n      default:\n        return filteredByTitle;\n    }\n  };\n\n  const visibleTodos = preparingTodos();\n\n  return (\n    <div className=\"TodoList\">\n      <h2>Todos:</h2>\n\n      <div className=\"TodoList__list-container\">\n\n        <label>\n          {'Filter by title: '}\n          <input\n            data-cy=\"filterByTitle\"\n            type=\"text\"\n            value={query}\n            onChange={onFilterByTitleHandleChange}\n          />\n        </label>\n\n        <select\n          className=\"TodoList__select\"\n          onChange={onTodoSelectHandleChange}\n        >\n          <option value={Status.All}>\n            All\n          </option>\n          <option value={Status.Active}>\n            Active\n          </option>\n          <option value={Status.Completed}>\n            Completed\n          </option>\n        </select>\n\n        <ul\n          className=\"TodoList__list\"\n          data-cy=\"listOfTodos\"\n        >\n          {visibleTodos.map(todo => (\n            <li\n              key={todo.id}\n              className={classNames(\n                'TodoList__item',\n                { 'TodoList__item--checked': todo.completed },\n                { 'TodoList__item--unchecked': !todo.completed },\n              )}\n            >\n              <label>\n                <input type=\"checkbox\" checked readOnly />\n                <p>{todo.title}</p>\n              </label>\n\n              {todo.userId && (\n                <button\n                  data-cy=\"userButton\"\n                  className={classNames('TodoList__user-button button', {\n                    'TodoList__user-button--selected':\n                      todo.userId === selectedUserId,\n                  })}\n                  type=\"button\"\n                  onClick={() => onSelectUserIdHandle(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './CurrentUser.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getUser } from '../../api/api';\nimport {\n  loadUserAC,\n  loadUserSelector,\n  selectUserIdAC,\n  selectUserIdSelector,\n  userLoadErrorAC,\n  userLoadErrorSelector,\n} from '../../store';\n\nexport const CurrentUser: React.FC = () => {\n  const dispatch = useDispatch();\n  const user = useSelector(loadUserSelector);\n  const userId = useSelector(selectUserIdSelector);\n  const errorMessage = useSelector(userLoadErrorSelector);\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const userFromServer = await getUser(userId);\n\n        dispatch(loadUserAC(userFromServer));\n      } catch {\n        dispatch(loadUserAC(null));\n        dispatch(userLoadErrorAC('Cant load user from server'));\n      }\n    }\n\n    response();\n  }, [userId]);\n\n  const handleClear = () => {\n    dispatch(selectUserIdAC(0));\n  };\n\n  return (\n    <div>\n      {user ? (\n        <div className=\"CurrentUser\">\n          <h2 className=\"CurrentUser__title\">\n            <span>\n              {`Selected user: ${user?.id}`}\n            </span>\n          </h2>\n\n          <h3\n            data-cy=\"userName\"\n            className=\"CurrentUser__name\"\n          >\n            {user?.name}\n          </h3>\n\n          <p className=\"CurrentUser__email\">\n            {user?.email}\n          </p>\n\n          <p className=\"CurrentUser__phone\">\n            {user?.phone}\n          </p>\n\n          <button\n            type=\"button\"\n            className=\"button CurrentUser__clear\"\n            onClick={() => handleClear()}\n          >\n            Clear User\n          </button>\n        </div>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\n\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getTodos } from './api/api';\nimport { CurrentUser } from './components/CurrentUser/CurrentUser';\nimport { TodoList } from './components/TodoList/TodoList';\nimport {\n  todosLoadErrorAC,\n  todosLoadErrorSelector,\n  loadTodosAC,\n  loadTodosSelector,\n  selectUserIdSelector,\n} from './store';\n\nconst App: React.FC = () => {\n  const dispatch = useDispatch();\n  const todos = useSelector(loadTodosSelector);\n  const selectedUserId = useSelector(selectUserIdSelector);\n  const errorMessage = useSelector(todosLoadErrorSelector);\n\n  useEffect(() => {\n    async function response() {\n      try {\n        const todosFromServer = await getTodos();\n\n        dispatch(loadTodosAC(todosFromServer));\n      } catch {\n        dispatch(todosLoadErrorAC('Cant load todos from server'));\n      }\n    }\n\n    response();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      {!errorMessage ? (\n        <div className=\"App__sidebar\">\n          {todos ? (\n            <TodoList\n              todos={todos}\n            />\n          ) : (\n            <p>Loading...</p>\n          )}\n        </div>\n      ) : (\n        <p>{errorMessage}</p>\n      )}\n\n      <div className=\"App__content\">\n        <div className=\"App__content-container\">\n          {selectedUserId ? (\n            <CurrentUser />\n          ) : 'No user selected'}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport store from './store';\nimport App from './App';\n\nconst Root = () => (\n  <Provider store={store}>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}